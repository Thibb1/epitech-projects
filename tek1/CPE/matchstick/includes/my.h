/*
** EPITECH PROJECT, 2020
** my.h
** File description:
** Library prototypes
*/

#ifndef DEF_MAIN
#define DEF_MAIN


////////////////////////////////////////////////////////////
/// \brief Keyword to return 84 on failure.
///
////////////////////////////////////////////////////////////
#define FAILURE 84


////////////////////////////////////////////////////////////
/// \brief Keyword to return 0 on success.
///
////////////////////////////////////////////////////////////
#define SUCCESS 0


#define ABS(x) ((x < 0) ? (x * -1L) : (x))

#include <string.h>
#include <time.h>
#include <grp.h>
#include <pwd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>

////////////////////////////////////////////////////////////
/// \brief Return 84 and print an error message.
///
/// \param error Error message to print
///
////////////////////////////////////////////////////////////
int my_ferror(const char *error);


////////////////////////////////////////////////////////////
/// \brief Write formatted output to stdout.
///
////////////////////////////////////////////////////////////
int my_printf(const char *str, ...);
////////////////////////////////////////////////////////////
/// \brief Write formatted output to a file descriptor.
///
/// \param  fd  file descriptor
/// \param  str format
///
////////////////////////////////////////////////////////////
int my_dprintf(int fd, const char *str, ...);

////////////////////////////////////////////////////////////
/// \brief Check the return value of a malloc.
///
/// \param m_ret Malloc return value
///
////////////////////////////////////////////////////////////
void m_check(void *m_ret);


////////////////////////////////////////////////////////////
/// \brief Swap two values of int pointers.
///
/// \param a First int pointer
/// \param b Second int pointer
///
////////////////////////////////////////////////////////////
void my_swap(int *a, int *b);


////////////////////////////////////////////////////////////
/// \brief  Return the number of occurrences of a character
///         in a string.
///
/// \param str  String to check
/// \param c    Character to check
///
////////////////////////////////////////////////////////////
int my_grep(const char *str, const char c);


////////////////////////////////////////////////////////////
/// \brief  Return the first number found in a string.
///
/// \param str_with_number  String containing the number
///
////////////////////////////////////////////////////////////
int my_getnbr(char const *str_with_number);


int my_is_int(long long n, int x, int a);


////////////////////////////////////////////////////////////
/// \brief  Return the length of a string.
///
/// \param str String to calculate
///
////////////////////////////////////////////////////////////
int my_strlen(char const *str);


////////////////////////////////////////////////////////////
/// \brief  Compares two strings.
///
/// \param s1 First string to compare
/// \param s2 Second string to compare
///
////////////////////////////////////////////////////////////
int my_strcmp(char const *s1, char const *s2);


////////////////////////////////////////////////////////////
/// \brief  Compares two strings until it reaches n char.
///
/// \param s1 First string to compare
/// \param s2 Second string to compare
/// \param n  Number of characters to compare
///
////////////////////////////////////////////////////////////
int my_strncmp(char const *s1, char const *s2, int n);


////////////////////////////////////////////////////////////
/// \brief  Copies all character of source into dest.
///
/// \param dest String destination
/// \param src  String source
///
////////////////////////////////////////////////////////////
char *my_strcpy(char *dest, char const *src);


////////////////////////////////////////////////////////////
/// \brief  Copies n character of source into dest.
///
/// \param dest String destination
/// \param src  String source
/// \param n    Number of characters to copy
///
////////////////////////////////////////////////////////////
char *my_strncpy(char *dest, char const *src, int n);


////////////////////////////////////////////////////////////
/// \brief  Return a reversed copy of a string.
///
/// \param src String to reverse
///
////////////////////////////////////////////////////////////
char *my_revstr(char *src);


////////////////////////////////////////////////////////////
/// \brief  Import src string into dest string.
///
/// \param dest String destination
/// \param src  String source
///
////////////////////////////////////////////////////////////
char *my_strcat(char *dest, char const *src);


////////////////////////////////////////////////////////////
/// \brief  Import n char of src string into dest string.
///
/// \param dest String destination
/// \param src  String source
/// \param n    Number of char to import
///
////////////////////////////////////////////////////////////
char *my_strncat(char *dest, char const *src, const int nb);


////////////////////////////////////////////////////////////
/// \brief  Return a capitalized copy of a string.
///
/// \param src String to capitalize
///
////////////////////////////////////////////////////////////
char *my_strcapitalize(char *src);


////////////////////////////////////////////////////////////
/// \brief  Return a lowcased copy of a string.
///
/// \param src String to lowcase
///
////////////////////////////////////////////////////////////
char *my_strlowcase(char *src);


////////////////////////////////////////////////////////////
/// \brief  Return a up_cased copy of a string.
///
/// \param src String to up_case
///
////////////////////////////////////////////////////////////
char *my_strupcase(char *src);



////////////////////////////////////////////////////////////
/// \brief  Return first occurrence of to_find in str/
///
/// \param src      String source
/// \param tof_ind  String to find
///
////////////////////////////////////////////////////////////
char *my_strstr(char *src, char const *to_find);


////////////////////////////////////////////////////////////
/// \brief  Return a malloced duplicate a string.
///
/// \param src String to duplicate
///
////////////////////////////////////////////////////////////
char *my_strdup(const char *str);


#endif
