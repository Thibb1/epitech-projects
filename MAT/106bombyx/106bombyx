#!/usr/bin/env python3

import math
import numpy as np
import sys
import os

def pop_calc(n, k):
    n = k * n * ((1000 - n) / 1000)
    if (n < 0):
        return (0)
    return n

def num_individuals(n, k):
    for gen in range(100):
        print("%d %.2f" %(gen + 1, n))
        n = pop_calc(n, k)

def plot_pop(n, a, b):
    k = 1
    base = n
    while k < 4:
        i = 1
        n = base
        while i < a:
            n = pop_calc(n, k)
            i += 1
        while i <= b:
            print("%.2f %.2f" %(k, round(n, 2)))
            n = pop_calc(n, k)
            i += 1
        k += 0.01

def is_num(a):
    try:
        float(a)
        return 0
    except ValueError:
        return 84

def is_int(a):
    try:
        int(a)
        return 0
    except ValueError:
        return 84

def check_input(ac):
    for x in range(1, ac):
        if (sys.argv[x] == "-h"):
            print("USAGE\n"
            "\t%s n [k | i0 i1]\n\n"
            "DESCRIPTION\n"
            "\tn\tnumber of first generation individuals\n"
            "\tk\tgrowth rate from 1 to 4\n"
            "\ti0\tinitial generation (included)\n"
            "\ti1\tfinal generation (included)" %sys.argv[0])
            exit (0)
        if (is_num(sys.argv[x])):
            print("%s: only numbers allowed.\nTry %s -h" %(sys.argv[0], sys.argv[0]))
            exit (84)
    if (ac == 3):
        k = float(sys.argv[2])
        if (is_int(sys.argv[1]) or int(sys.argv[1]) <= 0):
            print("%s: only positive int allowed.\nTry %s -h\n" %(sys.argv[0], sys.argv[0]))
            exit (84)
        elif (1 > k or 4 < k):
            print("%s: k should be between 1 and 4 included int allowed.\nTry %s -h\n" %(sys.argv[0], sys.argv[0]))
            exit (84)
    elif (ac == 4):
        if (is_int(sys.argv[1]) or is_int(sys.argv[2]) or is_int(sys.argv[3]) or int(sys.argv[1]) <= 0 or int(sys.argv[2]) <= 0 or int(sys.argv[3]) <= 0):
            print("%s: only positive int allowed.\nTry %s -h\n" %(sys.argv[0], sys.argv[0]))
            exit (84)
        elif (int(sys.argv[2]) > int(sys.argv[3])):
            print("%s: second argv should be inferior to third arg.\nTry %s -h\n" %(sys.argv[0], sys.argv[0]))
            exit (84)
    else:
        print("%s: %d argument given but 2 or 3 awaited.\nTry %s -h" %(sys.argv[0], len(sys.argv) - 1, sys.argv[0]))
        exit (84)

def main(ac):
    check_input(ac)
    n = int(sys.argv[1])
    if (ac == 3):
        k = float(sys.argv[2])
        num_individuals(n, k)
    elif (ac == 4):
        a = int(sys.argv[2])
        b = int(sys.argv[3])
        plot_pop(n, a, b)

if __name__ == "__main__":
    main(len(sys.argv))