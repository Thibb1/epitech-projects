#!/usr/bin/env python3

import math
import sys
import os

def fn(F, x):
    return F["a"] * x**4 + F["b"] * x**3 + F["c"] * x**2 + F["d"] * x + F["e"]

def fn_p(F, x):
    return 4 * F["a"] * x**3 + 3 * F["b"] * x**2 + 2 * F["c"] * x + F["d"]

def is_int(a):
    try:
        int(a)
        return 0
    except ValueError:
        return 84

def bisection(F, I, n):
    x = ( I["a"] + I["b"] ) / 2
    f_x = fn(F, x)
    f_a = fn(F, I["a"])
    round_x = round(x, n)
    if abs(f_x) <= 10**-n:
        print("x = {0:.{1}f}".format(round_x, n))
        return
    if (round_x != x):
            print ("x = {0:.{1}f}".format(round_x, n))
    else:
        print("x =", round_x)
    if f_x * f_a < 0:
        I = {"a": I["a"], "b": x}
        bisection(F, I, n)
    else:
        I = {"a": x, "b": I["b"]}
        bisection(F, I, n)

def newton(F, x, n):
    a = fn(F, x)
    b = fn_p(F, x)
    if b == 0:
        exit(84)
    round_x = round(x, n)
    y = x - a / b
    f_y = abs(fn(F, y))
    if f_y <= 10**-n:
        print ("x = {0:.{1}f}".format(round_x, n))
        round_y = round(y, n)
        print ("x = {0:.{1}f}".format(round_y, n))
        return
    else:
        if (round_x != x):
            print ("x = {0:.{1}f}".format(round_x, n))
        else:
            print ("x =", round_x)
        newton(F, y, n)

def secant(F, X, n):
    a = fn(F, X["1"]) * (X["1"] - X["0"])
    b = fn(F, X["1"]) - fn(F, X["0"])
    if b == 0:
        exit(84)
    x = X["1"] - a / b
    round_x = round(x, n)
    if abs(fn(F, x)) <= 10**-n:
        print ("x = {0:.{1}f}".format(round_x, n))
        return
    else:
        if (round_x != x):
            print ("x = {0:.{1}f}".format(round_x, n))
        else:
            print ("x =", round_x)
        X = {"0": X["1"], "1":x}
        secant(F, X, n)

for x in range(1, len(sys.argv)):
    if (sys.argv[x] == "-h"):
        print("USAGE\n\t%s opt a0 a1 a2 a3 a4 n\n\nDESCRIPTION\n\topt\tmethod option:\n\t\t\t1 for the bisection method\n\t\t\t2 for the Netwton's method\n\t\t\t3 for the secant method\n\ta[0-4]\tcoefficients of the equation\n\tn\tprecision (the application of the polynomial to the solution should\n\t\tbe smaller than 10^-n)" %sys.argv[0])
        exit (0)

if (len(sys.argv) != 8):
    print("%s: %d argument given but 7 awaited.\nTry %s -h" %(sys.argv[0], len(sys.argv) - 1, sys.argv[0]))
    exit (84)

for x in range(1, len(sys.argv)):
    if (is_int(sys.argv[x])):
        print("%s: only int allowed.\nTry %s -h" %(sys.argv[0], sys.argv[0]))
        exit (84)

if (int(sys.argv[7]) <= 0):
    print("%s: bad precision.\nTry %s -h" %(sys.argv[0], sys.argv[0]))
    exit (84)

if (int(sys.argv[1]) > 3 or int(sys.argv[1]) < 1):
    print("%s: wrong method.\nTry %s -h" %(sys.argv[0], sys.argv[0]))
    exit (84)

F = {"a": int(sys.argv[6]), "b": int(sys.argv[5]), "c": int(sys.argv[4]), "d": int(sys.argv[3]), "e": int(sys.argv[2])}
n = int(sys.argv[7])

if (int(sys.argv[1]) == 1):
    I = {"a": 0, "b": 1}
    bisection(F, I, n)

if (int(sys.argv[1]) == 2):
    x = 0.5
    newton(F, x, n)

if (int(sys.argv[1]) == 3):
    X = {"0": 0, "1": 1}
    secant(F, X, n)
